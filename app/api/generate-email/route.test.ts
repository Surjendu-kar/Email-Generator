import { describe, it, expect, vi, beforeEach, afterEach } from "vitest";
import { NextRequest } from "next/server";

// Mock Groq SDK
const mockCreate = vi.fn();
vi.mock("groq-sdk", () => {
  return {
    default: vi.fn().mockImplementation(() => ({
      chat: {
        completions: {
          create: mockCreate,
        },
      },
    })),
  };
});

describe("/api/generate-email", () => {
  let POST: any;

  beforeEach(async () => {
    vi.clearAllMocks();
    // Set up default environment
    process.env.GROQ_API_KEY = "test-api-key";

    // Import after mocking
    const module = await import("./route");
    POST = module.POST;
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  it("should generate email successfully with valid prompt", async () => {
    // Mock successful Groq response
    mockCreate.mockResolvedValue({
      choices: [
        {
          message: {
            content:
              "Subject: Test Email\n\nDear recipient,\n\nThis is a test email generated by AI.\n\nBest regards,\nSender",
          },
        },
      ],
    });

    const request = new NextRequest(
      "http://localhost:3000/api/generate-email",
      {
        method: "POST",
        body: JSON.stringify({
          prompt: "Write a professional email about a meeting",
        }),
      }
    );

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(200);
    expect(data.success).toBe(true);
    expect(data.email).toContain("Subject: Test Email");
    expect(data.email).toContain("Dear recipient");
    expect(mockCreate).toHaveBeenCalledWith({
      messages: [
        {
          role: "system",
          content: expect.stringContaining("professional email writer"),
        },
        {
          role: "user",
          content: "Write a professional email about a meeting",
        },
      ],
      model: "llama-3.3-70b-versatile",
      temperature: 0.7,
      max_tokens: 1000,
    });
  });

  it("should return error when API key is not configured", async () => {
    delete process.env.GROQ_API_KEY;

    const request = new NextRequest(
      "http://localhost:3000/api/generate-email",
      {
        method: "POST",
        body: JSON.stringify({ prompt: "Test prompt" }),
      }
    );

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(500);
    expect(data.success).toBe(false);
    expect(data.error).toBe("Groq API key not configured");
  });

  it("should return error when prompt is missing", async () => {
    const request = new NextRequest(
      "http://localhost:3000/api/generate-email",
      {
        method: "POST",
        body: JSON.stringify({}),
      }
    );

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(400);
    expect(data.success).toBe(false);
    expect(data.error).toBe(
      "Prompt is required and must be a non-empty string"
    );
  });

  it("should return error when prompt is empty string", async () => {
    const request = new NextRequest(
      "http://localhost:3000/api/generate-email",
      {
        method: "POST",
        body: JSON.stringify({ prompt: "   " }),
      }
    );

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(400);
    expect(data.success).toBe(false);
    expect(data.error).toBe(
      "Prompt is required and must be a non-empty string"
    );
  });

  it("should return error when prompt is not a string", async () => {
    const request = new NextRequest(
      "http://localhost:3000/api/generate-email",
      {
        method: "POST",
        body: JSON.stringify({ prompt: 123 }),
      }
    );

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(400);
    expect(data.success).toBe(false);
    expect(data.error).toBe(
      "Prompt is required and must be a non-empty string"
    );
  });

  it("should return error when prompt is too long", async () => {
    const longPrompt = "a".repeat(2001);

    const request = new NextRequest(
      "http://localhost:3000/api/generate-email",
      {
        method: "POST",
        body: JSON.stringify({ prompt: longPrompt }),
      }
    );

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(400);
    expect(data.success).toBe(false);
    expect(data.error).toBe(
      "Prompt is too long. Maximum 2000 characters allowed."
    );
  });

  it("should handle Groq API errors gracefully", async () => {
    mockCreate.mockRejectedValue(new Error("API key invalid"));

    const request = new NextRequest(
      "http://localhost:3000/api/generate-email",
      {
        method: "POST",
        body: JSON.stringify({ prompt: "Test prompt" }),
      }
    );

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(401);
    expect(data.success).toBe(false);
    expect(data.error).toBe("Invalid API key configuration");
  });

  it("should handle rate limit errors", async () => {
    mockCreate.mockRejectedValue(new Error("rate limit exceeded"));

    const request = new NextRequest(
      "http://localhost:3000/api/generate-email",
      {
        method: "POST",
        body: JSON.stringify({ prompt: "Test prompt" }),
      }
    );

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(429);
    expect(data.success).toBe(false);
    expect(data.error).toBe("Rate limit exceeded. Please try again later.");
  });

  it("should handle empty response from Groq", async () => {
    mockCreate.mockResolvedValue({
      choices: [
        {
          message: {
            content: null,
          },
        },
      ],
    });

    const request = new NextRequest(
      "http://localhost:3000/api/generate-email",
      {
        method: "POST",
        body: JSON.stringify({ prompt: "Test prompt" }),
      }
    );

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(500);
    expect(data.success).toBe(false);
    expect(data.error).toBe("Failed to generate email content");
  });

  it("should handle generic errors", async () => {
    mockCreate.mockRejectedValue(new Error("Network error"));

    const request = new NextRequest(
      "http://localhost:3000/api/generate-email",
      {
        method: "POST",
        body: JSON.stringify({ prompt: "Test prompt" }),
      }
    );

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(500);
    expect(data.success).toBe(false);
    expect(data.error).toBe(
      "Internal server error occurred while generating email"
    );
  });

  it("should trim whitespace from generated content", async () => {
    mockCreate.mockResolvedValue({
      choices: [
        {
          message: {
            content: "   Subject: Test\n\nEmail content   ",
          },
        },
      ],
    });

    const request = new NextRequest(
      "http://localhost:3000/api/generate-email",
      {
        method: "POST",
        body: JSON.stringify({ prompt: "Test prompt" }),
      }
    );

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(200);
    expect(data.success).toBe(true);
    expect(data.email).toBe("Subject: Test\n\nEmail content");
  });
});
